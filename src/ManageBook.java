
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author User
 */
public class ManageBook extends javax.swing.JFrame {

    /**
     * Creates new form ManageBook
     */
    public ManageBook() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtbID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtGenre = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnShow = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 255, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1950, 950));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Manage Book Stock");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(170, 30, 330, 45);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Author");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(120, 270, 80, 30);
        getContentPane().add(txtAuthor);
        txtAuthor.setBounds(210, 270, 170, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Book ID");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(120, 130, 80, 30);

        txtbID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbIDActionPerformed(evt);
            }
        });
        getContentPane().add(txtbID);
        txtbID.setBounds(210, 130, 170, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Book Title");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(120, 200, 80, 30);

        txtTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleActionPerformed(evt);
            }
        });
        getContentPane().add(txtTitle);
        txtTitle.setBounds(210, 200, 170, 30);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Price");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(120, 340, 80, 30);
        getContentPane().add(txtPrice);
        txtPrice.setBounds(210, 340, 170, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Genre");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(120, 410, 80, 30);
        getContentPane().add(txtGenre);
        txtGenre.setBounds(210, 410, 170, 30);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(470, 270, 90, 30);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd);
        btnAdd.setBounds(470, 480, 90, 30);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate);
        btnUpdate.setBounds(470, 410, 90, 30);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemove);
        btnRemove.setBounds(470, 340, 90, 30);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Book_ID", "Book_Title", "Author", "Price", "Genre"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(740, 70, 710, 570);

        btnShow.setText("Show Data");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });
        getContentPane().add(btnShow);
        btnShow.setBounds(470, 130, 90, 30);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch);
        btnSearch.setBounds(470, 200, 90, 30);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pexels-jplenio-1103970.jpg"))); // NOI18N
        getContentPane().add(jLabel7);
        jLabel7.setBounds(0, 0, 1670, 950);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtbIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbIDActionPerformed
       
    }//GEN-LAST:event_txtbIDActionPerformed

    private void txtTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTitleActionPerformed

   
    

    @SuppressWarnings("empty-statement")
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
         if (evt.getSource() == btnAdd){
             String Book_ID = txtbID.getText();
             String Book_Title = txtTitle.getText();
             String Author = txtAuthor.getText();
             String Price = txtPrice.getText();
             String Genre = txtGenre.getText();
            }
          ManageBook manageBook = new ManageBook();  
          String query = "INSERT INTO books (Book_ID, Book_Title, Author, Price, Genre) VALUES (?, ?, ?, ?,?)";
         try (Connection conn = DatabaseConnector.connect(); 
              PreparedStatement stmt = conn.prepareStatement(query))
           {
            stmt.setString(1, txtbID.getText());
            stmt.setString(2, txtTitle.getText());
            stmt.setString(3, txtAuthor.getText());
            stmt.setDouble(4, Double.parseDouble(txtPrice.getText()));
            stmt.setString(5, txtGenre.getText());
            stmt.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Book added successfully!");
          }catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding book.");
        }
    
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

    String query = "UPDATE books SET Book_Title=?, Author=?, Price=?, Genre=? WHERE Book_ID=?";
    try (Connection conn = DatabaseConnector.connect();
         PreparedStatement stmt = conn.prepareStatement(query)) {
         
        stmt.setString(1, txtTitle.getText());
        stmt.setString(2, txtAuthor.getText());
        stmt.setDouble(3, Double.parseDouble(txtPrice.getText()));
        stmt.setString(4, txtGenre.getText());
        stmt.setString(5, txtbID.getText());
        
        if (stmt.executeUpdate() > 0) {
            JOptionPane.showMessageDialog(this, "Book updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Book not found!");
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating book.");
    }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        
            
            try {Connection conn = DatabaseConnector.connect(); 
              PreparedStatement  pst=conn.prepareStatement("SELECT * FROM books");
            
            ResultSet rs = pst.executeQuery();
            rs.getMetaData();
            int q = rs.getMetaData().getColumnCount();
            
            DefaultTableModel df = (DefaultTableModel)jTable1.getModel();
            df.setRowCount(0);
            while(rs.next()){
                Vector vec = new Vector();
                for(int a=1; a<=q; a++){
                    vec.add(rs.getString("Book_ID"));
                    vec.add(rs.getString("Book_Title"));
                    vec.add(rs.getString("Author"));
                    vec.add(rs.getString("Price"));
                    vec.add(rs.getString("Genre"));
                  
                }
                df.addRow(vec);
            }
        }
             catch (SQLException ex) {
                 ex.printStackTrace();
            }
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
    String bookID = JOptionPane.showInputDialog(this, "Enter Book ID to remove:"); 
    if (bookID == null || bookID.trim().isEmpty()) { 
        JOptionPane.showMessageDialog(this, "Book ID cannot be empty."); 
        return; 
    }
    
    String query = "DELETE FROM books WHERE Book_ID = ?"; 
    try (Connection conn = DatabaseConnector.connect(); 
         PreparedStatement stmt = conn.prepareStatement(query)) {
        
        stmt.setString(1, bookID); 
        int rowsAffected = stmt.executeUpdate();
        
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Book removed successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Book ID not found!");
        }
        
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error removing book.");
    }

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
             
    String bID = JOptionPane.showInputDialog(this, "Enter Book ID:");
    if (bID == null || bID.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Book ID cannot be empty.");
        return;
    }
    
    String query = "SELECT * FROM books WHERE Book_ID = ?";
    try (Connection conn = DatabaseConnector.connect();
         PreparedStatement pstm = conn.prepareStatement(query)) {
        pstm.setString(1, bID);
        try (ResultSet rs = pstm.executeQuery()) {
            if (rs.next()) {
                txtbID.setText(rs.getString("Book_ID"));
                txtTitle.setText(rs.getString("Book_Title"));
                txtAuthor.setText(rs.getString("Author"));
                txtPrice.setText(rs.getString("Price"));
                txtGenre.setText(rs.getString("Genre"));
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Book Record.");
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching book details.");
    }

    }//GEN-LAST:event_btnSearchActionPerformed
 
   public class DatabaseConnector {  
    private static final  String username = "root"; //  username    
    private static final String password = ""; //  MySQL password 
    private static final String url = "jdbc:mysql://localhost:3306/bookdb"; // database name
             
    public static Connection connect() throws SQLException {  
        try {  
            Class.forName("com.mysql.cj.jdbc.Driver");  
            return  DriverManager.getConnection(url, username, password); 
        } catch (ClassNotFoundException e) {  
            throw new SQLException("Database driver not found", e);  
        }  
    }  
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShow;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtGenre;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextField txtbID;
    // End of variables declaration//GEN-END:variables
}
