
import java.awt.event.FocusAdapter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


/**
 *
 * @author User
 */
public class SalesTransaction extends javax.swing.JFrame {

    /**
     * Creates new form SalesTransaction
     */
    public SalesTransaction() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBID = new javax.swing.JTextField();
        txtQnt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnSearchbook = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        cmbPayment = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtIID = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1950, 950));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Invoice No");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(80, 270, 137, 26);

        txtTID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTIDActionPerformed(evt);
            }
        });
        getContentPane().add(txtTID);
        txtTID.setBounds(230, 330, 150, 40);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Book ID");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(480, 260, 137, 26);
        getContentPane().add(txtBID);
        txtBID.setBounds(670, 260, 148, 35);
        getContentPane().add(txtQnt);
        txtQnt.setBounds(1190, 260, 148, 35);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Quantity Sold");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(1040, 260, 137, 26);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Unit Price");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(480, 320, 137, 26);
        getContentPane().add(txtUnitPrice);
        txtUnitPrice.setBounds(670, 320, 148, 35);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Payment Method");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(1040, 330, 137, 26);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 153));
        jLabel8.setText("Sales Transaction");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(39, 20, 300, 39);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "InvoiceNo", "TransactionID", "BookID", "Unit Price", "Quantity Sold", "Total Amount", "Payment Method", "Sale Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(80, 420, 1260, 220);

        btnAdd.setBackground(new java.awt.Color(204, 204, 204));
        btnAdd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd);
        btnAdd.setBounds(620, 170, 92, 34);

        btnSearchbook.setBackground(new java.awt.Color(204, 204, 204));
        btnSearchbook.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSearchbook.setText("Search Book");
        btnSearchbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbookActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearchbook);
        btnSearchbook.setBounds(890, 260, 110, 34);

        btnRemove.setBackground(new java.awt.Color(204, 204, 204));
        btnRemove.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemove);
        btnRemove.setBounds(970, 170, 92, 34);

        jButton4.setBackground(new java.awt.Color(204, 204, 204));
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton4.setText("Show Data");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(60, 110, 110, 34);

        jButton5.setBackground(new java.awt.Color(204, 204, 204));
        jButton5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton5.setText("Update");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(790, 170, 92, 34);

        jButton6.setBackground(new java.awt.Color(204, 204, 204));
        jButton6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton6.setText("Back");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(400, 110, 92, 34);

        cmbPayment.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cmbPayment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cash", "credit card", "online" }));
        getContentPane().add(cmbPayment);
        cmbPayment.setBounds(1190, 320, 150, 40);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Transaction ID");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(80, 340, 137, 26);

        txtIID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIIDActionPerformed(evt);
            }
        });
        getContentPane().add(txtIID);
        txtIID.setBounds(230, 260, 150, 40);

        btnSearch.setBackground(new java.awt.Color(204, 204, 204));
        btnSearch.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch);
        btnSearch.setBounds(230, 110, 92, 34);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pexels-jplenio-1103970.jpg"))); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(0, 0, 1950, 950);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTIDActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //check if event source is "Add button"
        if (evt.getSource() == btnAdd){
             String InvoiceNo = txtIID.getText();
             String BookID = txtBID.getText();
             String QuantitySold = txtQnt.getText();
             String PaymentMethod = cmbPayment.getSelectedItem().toString();
             String UnitPrice = txtUnitPrice.getText();
            }
           
          String query = "INSERT INTO salestransaction (InvoiceNo, TransactionID, BookID, QuantitySold, PaymentMethod, UnitPrice) VALUES (?, ?, ?, ?, ?, ?)";
         try (Connection conn = DatabaseConnector.connect(); 
              PreparedStatement stmt = conn.prepareStatement(query))
           {
            stmt.setString(1, txtIID.getText());
            stmt.setString(2, txtTID.getText());
            stmt.setString(3, txtBID.getText());
            stmt.setInt(4, Integer.parseInt(txtQnt.getText())); // Convert Quantity to integer
            stmt.setString(5, cmbPayment.getSelectedItem().toString());
            stmt.setDouble(6, Double.parseDouble(txtUnitPrice.getText())); 
            //execute adding data to the table
            stmt.executeUpdate();
            //show adding successfully massage
            JOptionPane.showMessageDialog(this, "Transaction added successfully!");
          }catch (SQLException ex) {
            ex.printStackTrace();
            //Display error message
            JOptionPane.showMessageDialog(this, "Error adding Transaction.");
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbookActionPerformed
        //prompt to enter book id
        String BookID = JOptionPane.showInputDialog(this, "Enter Book ID:");
        //Ckeck for empty or null input
    if (BookID == null || BookID.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Book ID cannot be empty.");
        return;
    }
    // sql query to search books
    String query = "SELECT * FROM books WHERE Book_ID = ?";
    //create database connection
    try (Connection conn = DatabaseConnector.connect();
         PreparedStatement pstm = conn.prepareStatement(query)) {
        pstm.setString(1, BookID);
        try (ResultSet rs = pstm.executeQuery()) {
            if (rs.next()) {
                txtBID.setText(rs.getString("Book_ID"));
                txtUnitPrice.setText(rs.getString("Price"));
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Book Record.");
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching book details.");
    }

      
    }//GEN-LAST:event_btnSearchbookActionPerformed

    private void txtIIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIIDActionPerformed
        
    }//GEN-LAST:event_txtIIDActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
     //prompt to ennter Transaction Id                
    String TransactionID = JOptionPane.showInputDialog(this, "Enter Transaction ID:");
    if (TransactionID == null || TransactionID.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Transaction ID cannot be empty.");
        return;
    }
    //sql query to select all column from salestransaction table
    String query = "SELECT * FROM salestransaction WHERE TransactionID = ?";
    try (Connection conn = DatabaseConnector.connect();
         PreparedStatement pstm = conn.prepareStatement(query)) {
        pstm.setString(1, TransactionID);
        try (ResultSet rs = pstm.executeQuery()) {
            if (rs.next()) {
                txtIID.setText(rs.getString("InvoiceNo"));
                txtTID.setText(rs.getString("TransactionID")); 
                txtBID.setText(rs.getString("BookID"));
                txtQnt.setText(rs.getString("QuantitySold"));
                cmbPayment.setSelectedItem(rs.getString("PaymentMethod")); 
                txtUnitPrice.setText(rs.getString("UnitPrice"));

            } else {
                JOptionPane.showMessageDialog(this, "Invalid Transaction Record.");
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching Transaction details.");
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String query = "UPDATE salestransaction SET InvoiceNo=?, BookID=?, QuantitySold=?, PaymentMethod=?, UnitPrice=? WHERE TransactionID=?";
    try (Connection conn = DatabaseConnector.connect();
         PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, txtIID.getText());
            stmt.setString(2, txtBID.getText());
            stmt.setInt(3, Integer.parseInt(txtQnt.getText())); 
            stmt.setString(4, cmbPayment.getSelectedItem().toString());
            stmt.setDouble(5, Double.parseDouble(txtUnitPrice.getText())); 
            stmt.setInt(6, Integer.parseInt(txtTID.getText()));
            
        if (stmt.executeUpdate() > 0) {
            JOptionPane.showMessageDialog(this, "Sales Transaction updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Sales Transaction not found!");
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating Transaction.");
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        String TransactionID = JOptionPane.showInputDialog(this, "Enter Transaction ID to remove:"); 
    if (TransactionID == null || TransactionID.trim().isEmpty()) { 
        JOptionPane.showMessageDialog(this, "Transaction ID cannot be empty."); 
        return; 
    }
    
    String query = "DELETE FROM salestransaction WHERE TransactionID = ?"; 
    try (Connection conn = DatabaseConnector.connect(); 
         PreparedStatement stmt = conn.prepareStatement(query)) {
        
        stmt.setString(1, TransactionID); 

        if (stmt.executeUpdate() > 0) {
            JOptionPane.showMessageDialog(this, "Transaction removed successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Transaction ID not found!");
        }
        
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error removing Transaction.");
    }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         try {Connection conn = DatabaseConnector.connect(); 
              PreparedStatement  pst=conn.prepareStatement("SELECT * FROM salestransaction");
            
            ResultSet rs = pst.executeQuery();
            rs.getMetaData();
            int q = rs.getMetaData().getColumnCount();
            
            DefaultTableModel df = (DefaultTableModel)jTable1.getModel();
            df.setRowCount(0);
            while(rs.next()){
                Vector vec = new Vector();
                for(int a=1; a<=q; a++){
                    vec.add(rs.getString("InvoiceNo"));
                    vec.add(rs.getString("TransactionID"));
                    vec.add(rs.getString("BookID"));
                    vec.add(rs.getString("UnitPrice"));
                    vec.add(rs.getString("QuantitySold"));
                    vec.add(rs.getString("TotalAmount"));
                    vec.add(rs.getString("PaymentMethod"));
                    vec.add(rs.getString("SaleDate"));
                  
                }
                df.addRow(vec);
            }
        }
             catch (SQLException ex) {
                 ex.printStackTrace();
            }
    }//GEN-LAST:event_jButton4ActionPerformed
 public class DatabaseConnector {  
    private static final  String username = "root"; //MySQL username    
    private static final String password = ""; //MySQL password 
    private static final String url = "jdbc:mysql://localhost:3306/bookdb"; // database name
             
    public static Connection connect() throws SQLException {  
        try {  
            Class.forName("com.mysql.cj.jdbc.Driver");  
            return  DriverManager.getConnection(url, username, password); 
        } catch (ClassNotFoundException e) {  
            throw new SQLException("Database driver not found", e);  
        }  
    }  
}
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new SalesTransaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchbook;
    private javax.swing.JComboBox<String> cmbPayment;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtBID;
    private javax.swing.JTextField txtIID;
    private javax.swing.JTextField txtQnt;
    private javax.swing.JTextField txtTID;
    private javax.swing.JTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables
}
